      /*      
      
      function drawNodes(nodes) {

        // Draw points on canvas
        context.save();
        context.translate(offsetX, offsetY);
        context.scale(zoomLevel, zoomLevel);

        nodes.forEach(function (d) {
          if (!!d.children) {
            context.beginPath();
            context.arc(d.x, d.y, 2, 0, 2 * Math.PI);

            context.fillStyle = "black";
            context.fill();
            context.stroke();
          } else {
            context.beginPath();
            context.arc((tree.maxRadius) * Math.sin(d.angle), (tree.maxRadius) * Math.cos(d.angle), 2, 0, 2 * Math.PI);
            context.fillStyle = "red";
            context.fill();
            context.stroke();
          }

        });
      }

      function drawLinks(links) {
        context.clearRect(0, 0, width, height); // Clear the canvas
        links.forEach(function (d) {
          context.beginPath();
          context.moveTo(d.source.x, d.source.y);
          context.lineTo(d.target.x, d.target.y);
          context.strokeStyle = "black";
          context.fill();
          context.stroke();
        });
      }

      function drawExternalLinks(nodes) {
        nodes.forEach(function (d) {
          context.beginPath();
          context.moveTo(d.x, d.y);
          context.lineTo((tree.maxRadius) * Math.cos(d.angle), tree.maxRadius * Math.sin(d.angle),);
          context.strokeStyle = "black";
          context.fill();
          context.stroke();

        });
      }
      

      // Get canvas and context
      const canvas = d3.select("#application-container").node();
      let width = window.innerWidth;
      let height = window.innerHeight;
      canvas.width = window.innerWidth;
      canvas.height = window.innerHeight;

      canvas.style.width = `${width}px`;
      canvas.style.maxWidth = "100%";
      canvas.style.height = "auto";

      let tree = constructTree(data, false, 'application-container');
      const context = canvas.getContext("2d");

      context.translate(width / 2, width / 4);

      let zoomLevel = 1;
      let offsetX = 0;
      let offsetY = 0;

      let links = tree.links();
      let nodes = tree.descendants();
      let leaves = tree.leaves()

                    context.clearRect(0, 0, width, height); // Clear the canvas
              drawLinks(links);
              drawNodes(nodes);
              drawExternalLinks(leaves)

            */
